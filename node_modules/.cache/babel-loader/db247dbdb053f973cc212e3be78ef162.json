{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/projects/Projects.js\",\n    _s = $RefreshSig$();\n\nimport { init } from 'emailjs-com';\nimport React, { useEffect } from 'react';\nimport { LinePieces } from 'three';\nimport { projects } from \"../../data/projects-data\";\nimport Project from \"./Project\";\n\nconst Projects = () => {\n  _s();\n\n  const {\n    project1,\n    project2,\n    project3\n  } = projects;\n  let Pieces = [];\n  useEffect(() => {\n    // Get all images and texts, get the `canvas` element, and save slider length\n    let sliderCanvas = document.querySelector('.pieces-slider__canvas');\n    let imagesEl = [].slice.call(document.querySelectorAll('.pieces-slider__image'));\n    let textEl = [].slice.call(document.querySelectorAll('.pieces-slider__text'));\n    let slidesLength = imagesEl.length; // Define indexes related variables, as we will use indexes to reference items\n\n    let currentIndex = 0,\n        currentImageIndex,\n        currentTextIndex,\n        currentNumberIndex;\n    let textIndexes = [];\n    let numberIndexes = []; // Update current indexes for image, text and number\n\n    function updateIndexes() {\n      currentImageIndex = currentIndex * 3;\n      currentTextIndex = currentImageIndex + 1;\n      currentNumberIndex = currentImageIndex + 2;\n    }\n\n    updateIndexes(); // Options for images\n\n    let imageOption = {\n      angle: 45,\n      // rotate item pieces 45deg\n      exraSpacing: {\n        extraX: 100,\n        extraY: 200\n      },\n      // this extra spacing is needed to cover all the item, because angle != 0\n      pieceWidth: function () {\n        return Pieces.random(50, 200);\n      },\n      // every piece will have a random width between 50px and 200px\n      ty: function () {\n        return Pieces.random(-400, 400);\n      } // every piece will be translated in the Y axis a random distance between -400px and 400px\n\n    }; // Options for texts\n\n    let textOptions = {\n      color: 'white',\n      backgroundColor: '#0066CC',\n      fontSize: function () {\n        return windowWidth > 720 ? 50 : 30;\n      },\n      padding: '15 20 10 20',\n      angle: -45,\n      extraSpacing: {\n        extraX: 0,\n        extraY: 300\n      },\n      piecesWidth: function () {\n        return Pieces.random(50, 200);\n      },\n      ty: function () {\n        return Pieces.random(-200, 200);\n      },\n      translate: function () {\n        if (windowWidth > 1120) return {\n          translateX: 200,\n          translateY: 200\n        };\n        if (windowWidth > 720) return {\n          translateX: 0,\n          translateY: 200\n        };\n        return {\n          translateX: 0,\n          translateY: 100\n        };\n      }\n    };\n    let numberOptions = {\n      color: 'white',\n      backgroundColor: '#0066CC',\n      backgroundRadius: 300,\n      fontSize: function () {\n        return windowWidth > 720 ? 100 : 50;\n      },\n      padding: function () {\n        return windowWidth > 720 ? '18 35 10 38' : '18 25 10 28';\n      },\n      angle: 0,\n      piecesSpacing: 2,\n      extraSpacing: {\n        extraX: 10,\n        extraY: 10\n      },\n      piecesWidth: 35,\n      ty: function () {\n        return Pieces.random(-200, 200);\n      },\n      translate: function () {\n        if (windowWidth > 1120) return {\n          translateX: -340,\n          translateY: -180\n        };\n        if (windowWidth > 720) return {\n          translateX: -240,\n          translateY: -180\n        };\n        return {\n          translateX: -140,\n          translateY: -100\n        };\n      }\n    };\n    let items = [];\n    let imagesReady = 0;\n\n    for (let i = 0; i < slidesLength; i++) {\n      // Wait for all images to load before initializing the slider and event listeners\n      let slideImage = new Image();\n\n      slideImage.onload = function () {\n        if (++imagesReady == slidesLength) {\n          initSlider();\n          initEvents();\n        }\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"projects-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pieces-slider\",\n      children: [/*#__PURE__*/_jsxDEV(Project, {\n        project: project1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Project, {\n        project: project2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Project, {\n        project: project3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"pieces-slider__canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pieces-slider__button pieces-slider__button--prev\",\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pieces-slider__button pieces-slider__button--next\",\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Projects, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/projects/Projects.js"],"names":["init","React","useEffect","LinePieces","projects","Project","Projects","project1","project2","project3","Pieces","sliderCanvas","document","querySelector","imagesEl","slice","call","querySelectorAll","textEl","slidesLength","length","currentIndex","currentImageIndex","currentTextIndex","currentNumberIndex","textIndexes","numberIndexes","updateIndexes","imageOption","angle","exraSpacing","extraX","extraY","pieceWidth","random","ty","textOptions","color","backgroundColor","fontSize","windowWidth","padding","extraSpacing","piecesWidth","translate","translateX","translateY","numberOptions","backgroundRadius","piecesSpacing","items","imagesReady","i","slideImage","Image","onload","initSlider","initEvents"],"mappings":"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","sourcesContent":["import { init } from 'emailjs-com';\nimport React, {useEffect} from 'react';\nimport { LinePieces } from 'three';\n\nimport { projects } from \"../../data/projects-data\";\nimport Project from \"./Project\";\n\nconst Projects = () => {\n    \n    const { project1, project2, project3} = projects;\n    let Pieces = [];\n\n    useEffect(()=>{\n        // Get all images and texts, get the `canvas` element, and save slider length\n        let sliderCanvas = document.querySelector('.pieces-slider__canvas');\n        let imagesEl = [].slice.call(document.querySelectorAll('.pieces-slider__image'));\n        let textEl = [].slice.call(document.querySelectorAll('.pieces-slider__text'));\n        let slidesLength = imagesEl.length;\n\n        // Define indexes related variables, as we will use indexes to reference items\n        let currentIndex = 0, currentImageIndex, currentTextIndex, currentNumberIndex;\n        let textIndexes = [];\n        let numberIndexes = [];\n\n        // Update current indexes for image, text and number\n        function updateIndexes(){\n            currentImageIndex = currentIndex * 3;\n            currentTextIndex = currentImageIndex + 1;\n            currentNumberIndex = currentImageIndex + 2;\n        }\n        updateIndexes();\n\n        // Options for images\n        let imageOption = {\n            angle : 45, // rotate item pieces 45deg\n            exraSpacing: { extraX: 100, extraY: 200}, // this extra spacing is needed to cover all the item, because angle != 0\n            pieceWidth: function(){ return Pieces.random(50, 200); }, // every piece will have a random width between 50px and 200px\n            ty: function(){ return Pieces.random( -400, 400 ); } // every piece will be translated in the Y axis a random distance between -400px and 400px\n        }\n\n        // Options for texts\n        let textOptions = {\n            color: 'white',\n            backgroundColor: '#0066CC',\n            fontSize: function() { return windowWidth > 720 ? 50 : 30; },\n            padding: '15 20 10 20',\n            angle: -45,\n            extraSpacing: {extraX: 0, extraY: 300},\n            piecesWidth: function() { return Pieces.random(50, 200); },\n            ty: function() { return Pieces.random(-200, 200); },\n            translate: function() {\n                if (windowWidth > 1120) return {translateX: 200, translateY: 200};\n                if (windowWidth > 720) return {translateX: 0, translateY: 200};\n                return {translateX: 0, translateY: 100};\n                }\n        };\n\n        let numberOptions = {\n            color: 'white',\n            backgroundColor: '#0066CC',\n            backgroundRadius: 300,\n            fontSize: function() { return windowWidth > 720 ? 100 : 50; },\n            padding: function() { return windowWidth > 720 ? '18 35 10 38' : '18 25 10 28'; },\n            angle: 0,\n            piecesSpacing: 2,\n            extraSpacing: {extraX: 10, extraY: 10},\n            piecesWidth: 35,\n            ty: function() { return Pieces.random(-200, 200); },\n            translate: function() {\n                if (windowWidth > 1120) return {translateX: -340, translateY: -180};\n                if (windowWidth > 720) return {translateX: -240, translateY: -180};\n                return {translateX: -140, translateY: -100};\n            }\n        };\n\n        let items = [];\n        let imagesReady = 0;\n        for(let i = 0; i < slidesLength; i++){\n            // Wait for all images to load before initializing the slider and event listeners\n            let slideImage = new Image();\n            slideImage.onload = function(){\n                if (++imagesReady == slidesLength){\n                    initSlider();\n                    initEvents();\n                }\n            }\n        }\n\n    },[])\n    \n\n   \n    \n    return (\n        <main className=\"projects-container\">\n            <div className=\"pieces-slider\">\n                <Project project={project1}/> \n                <Project project={project2}/> \n                <Project project={project3}/>\n            \n                <canvas className=\"pieces-slider__canvas\"></canvas>\n                \n                <button className=\"pieces-slider__button pieces-slider__button--prev\">prev</button>\n                <button className=\"pieces-slider__button pieces-slider__button--next\">next</button>\n            </div>          \n        </main>\n    )\n}\n\nexport default Projects;"]},"metadata":{},"sourceType":"module"}