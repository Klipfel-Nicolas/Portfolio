{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/Git Pro/Portfolio/src/components/PeriodicSkills.js\";\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport { CSS3DObject, CSS3DRenderer } from 'three-css3drenderer';\nimport TrackballControls from 'three-trackballcontrols';\nimport { table } from \"../data/languages-data\";\nimport * as TWEEN from 'tween.js';\nimport DestrucBtn from './DestrucBtn';\n\nclass PeriodicSkills extends Component {\n  /*\n  \n      componentDidMount(){\n          \n          // THREE PARAMETRES\n          let scene, camera, renderer, controls;\n          const objects = [];\n          const targets = {\n              grid: [],\n              helix: [],\n              table:[],\n              sphere:[]\n          };\n          const container = document.getElementById('periodic-container');\n          const width = container.offsetWidth;\n          const height = container.offsetHeight;\n          init();\n          animation();\n          onWindowResize()\n  \n          function init(){\n              \n              const felidView = 40;\n              \n              const aspect = width / height;\n              const nearPlane = 0.1;\n              const farPlane = 1000;\n              const WebGloutput = container;\n  \n              scene = new THREE.Scene();\n              \n              camera = new THREE.PerspectiveCamera( felidView, aspect, nearPlane, farPlane);\n              camera.position.z = 1500;\n         \n          //ELEMENTS\n          \n              for( let i=0; i < table.length; i +=5 ) {\n                  const element = document.createElement('div');\n                  element.className = 'element';\n                  element.style.backgroundColor = `rgba(0, 127, 127, ${ Math.random() * 0.5 + 0.25})`;\n  \n                  const number = document.createElement('div');\n                  number.className = 'number';\n                  number.textContent = i / 5 + 1;\n                  element.appendChild(number);\n  \n                  const symbol = document.createElement('div');\n                  symbol.className = 'symbol';\n                  symbol.textContent = table[ i ];\n                  element.appendChild(symbol);\n  \n                  const detail = document.createElement('div');\n                  detail.className = 'detail';\n                  detail.innerHTML = `${ table[ i+1 ]} <br/> ${ table[ i+2 ]}`;\n                  element.appendChild(detail);\n  \n                  const card = new CSS3DObject( element );\n                  card.position.x = Math.random() * width - (width/2);\n                  card.position.y = Math.random() * 1000 - 600 ;\n                  card.position.z = Math.random() * 1000 - 800;\n  \n                  scene.add(card);\n                  objects.push( card );\n  \n                  //TABLE\n  \n                  const object = new THREE.Object3D();\n                  object.position.x = table[i + 3] * 140 - (width/3); \n                  object.position.y = -table[i + 4] * 180 + (height/1.5); \n                  object.position.z = 0;\n  \n                  targets.table.push(object);\n              } \n  \n      \n              \n              \n  \n      //SPHERE\n              function sphere(){\n                  const vector = new THREE.Vector3();\n  \n                  for (let i =0; i< objects.length; ++i){\n                      let phi = Math.acos(-1 + ( 2 * i )/ objects.length);\n                      let theta = Math.sqrt( objects.length * Math.PI ) * phi;\n                      \n                      var object = new THREE.Object3D();\n  \n                      object.position.x = 800 * Math.cos( theta ) * Math.sin( phi );\n                      object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); \n                      object.position.z = 800 * Math.cos( phi );\n  \n                      //rotation object\n  \n                      vector.copy( object.position ).multiplyScalar(2);\n                      object.lookAt( vector );\n                      targets.sphere.push( object );\n                  }\n              }\n              sphere()\n      // HELIX\n              function helix(){\n                  const vector = new THREE.Vector3();\n  \n                  for(let i=0; i<objects.length; ++i){\n  \n                      let phi = i * 0.739 + Math.PI;\n                      const object = new THREE.Object3D();\n                      object.position.x = 800  * Math.sin( phi );\n                      object.position.y = -( i * 8 ) + 50;\n                      object.position.z = 800  * Math.cos( phi + Math.PI );\n              \n                      object.scale.set( 1.1, 1.1, 1.1 );\n              \n                      vector.x = object.position.x * 2;\n                      vector.y = object.position.y;\n                      vector.z = object.position.z * 2;\n              \n                      object.lookAt( vector );\n                      targets.helix.push( object );\n  \n                  }\n              }\n              \n              helix()\n      //GRID \n              \n                  for (let i =0 ; i<objects.length; i++ ) {\n      \n                      const object = new THREE.Object3D();\n              \n                      object.position.x =  360  * ( i   % 3) - 350;\n  \t                object.position.y = -360  * ( ( i /  3 >> 0 ) % 3 ) + 350;\n  \t                object.position.z = -700  * ( i / 9 >> 0 );\n  \n              \n                      targets.grid.push( object );\n                      \n                  }\n  \n  \n                  //RENDERER\n                  renderer = new CSS3DRenderer();\n                  renderer.setSize( width, height);\n                  renderer.domElement.style.position = 'absolute';\n                  WebGloutput.appendChild( renderer.domElement);\n              \n                  //CAMERA CONTROLE\n                  controls = new TrackballControls( camera, renderer.domElement );\n  \t\t\t\tcontrols.rotateSpeed = 2;\n  \t\t\t\tcontrols.minDistance = 1000;\n  \t\t\t\tcontrols.maxDistance = 4000;\n  \t\t\t\tcontrols.addEventListener( 'change', render );\n  \n              const gridBtn = document.getElementById('grid');\n              const tableBtn = document.getElementById('table');\n              const helixBtn = document.getElementById('helix');\n              const sphereBtn = document.getElementById('sphere');\n  \n              \n              gridBtn.addEventListener('click', function() { transform( targets.grid, 2000 )}, false );\n              tableBtn.addEventListener('click', function() { transform( targets.table, 2000 ) }, false );\n              helixBtn.addEventListener('click', function() { transform( targets.helix, 2000 ) }, false );\n              sphereBtn.addEventListener('click', function() { transform( targets.sphere, 2000 ) }, false );\n  \n              transform( targets.table, 2000 );\n          };\n          \n          function transform( targets, duration){\n              TWEEN.removeAll();\n  \n              for(let i = 0; i< objects.length; ++i){\n                  let object = objects[i];\n                  let target = targets[i];\n  \n                  new TWEEN.Tween(object.position)\n                      .to({ x: target.position.x, y: target.position.y, z: target.position.z}, Math.random() * duration + duration)\n                      .easing( TWEEN.Easing.Exponential.InOut )\n                      .start();\n  \n                  new TWEEN.Tween( object.rotation )\n  \t                .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z },Math.random() * duration + duration )\n  \t                .easing( TWEEN.Easing.Exponential.InOut )\n  \t                .start();\n  \n              }\n  \n          \n              new TWEEN.Tween({})\n                  .to({}, duration * 2)\n                  .onUpdate( render )\n                  .start();\n          }\n  \n          function render() {\n  \n              renderer.render( scene, camera );\n  \n          }\n  \n          function onWindowResize(){\n              camera.aspect = width / height;\n              camera.updateProjectionMatrix();\n  \n              renderer.setSize( width, height);\n              render();\n          }\n          \n  \n          function animation(){\n              requestAnimationFrame( animation );\n              TWEEN.update();\n              controls.update();\n              \n          }\n  \n      \n      }*/\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"periodic-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"menu\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          id: \"table\",\n          className: \"hover\",\n          children: /*#__PURE__*/_jsxDEV(DestrucBtn, {\n            word: \"TABLE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          id: \"sphere\",\n          children: /*#__PURE__*/_jsxDEV(DestrucBtn, {\n            word: \"SPHERE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          id: \"helix\",\n          children: /*#__PURE__*/_jsxDEV(DestrucBtn, {\n            word: \"HELIX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          id: \"grid\",\n          children: /*#__PURE__*/_jsxDEV(DestrucBtn, {\n            word: \"GRID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default PeriodicSkills;","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/Git Pro/Portfolio/src/components/PeriodicSkills.js"],"names":["React","Component","THREE","CSS3DObject","CSS3DRenderer","TrackballControls","table","TWEEN","DestrucBtn","PeriodicSkills","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,qBAA3C;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,cAAN,SAA6BR,SAA7B,CAAuC;AACvwBACI;AAAA,8BACI;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAI,QAAA,EAAE,EAAC,MAAP;AAAA,gCACI;AAAI,UAAA,EAAE,EAAC,OAAP;AAAe,UAAA,SAAS,EAAC,OAAzB;AAAA,iCAAiC,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,EAAE,EAAC,QAAP;AAAA,iCAAgB,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAI,UAAA,EAAE,EAAC,OAAP;AAAA,iCAAe,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAf;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAI,UAAA,EAAE,EAAC,MAAP;AAAA,iCAAc,QAAC,UAAD;AAAY,YAAA,IAAI,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA;AAAd;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,oBADJ;AAaH;;AA5OkC;;AA+OvC,eAAeD,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport * as THREE from \"three\";\nimport { CSS3DObject, CSS3DRenderer } from 'three-css3drenderer';\nimport TrackballControls from 'three-trackballcontrols';\nimport { table } from \"../data/languages-data\";\nimport * as TWEEN from 'tween.js'\nimport DestrucBtn from './DestrucBtn';\n\nclass PeriodicSkills extends Component {\n/*\n\n    componentDidMount(){\n        \n        // THREE PARAMETRES\n        let scene, camera, renderer, controls;\n        const objects = [];\n        const targets = {\n            grid: [],\n            helix: [],\n            table:[],\n            sphere:[]\n        };\n        const container = document.getElementById('periodic-container');\n        const width = container.offsetWidth;\n        const height = container.offsetHeight;\n        init();\n        animation();\n        onWindowResize()\n\n        function init(){\n            \n            const felidView = 40;\n            \n            const aspect = width / height;\n            const nearPlane = 0.1;\n            const farPlane = 1000;\n            const WebGloutput = container;\n\n            scene = new THREE.Scene();\n            \n            camera = new THREE.PerspectiveCamera( felidView, aspect, nearPlane, farPlane);\n            camera.position.z = 1500;\n       \n        //ELEMENTS\n        \n            for( let i=0; i < table.length; i +=5 ) {\n                const element = document.createElement('div');\n                element.className = 'element';\n                element.style.backgroundColor = `rgba(0, 127, 127, ${ Math.random() * 0.5 + 0.25})`;\n\n                const number = document.createElement('div');\n                number.className = 'number';\n                number.textContent = i / 5 + 1;\n                element.appendChild(number);\n\n                const symbol = document.createElement('div');\n                symbol.className = 'symbol';\n                symbol.textContent = table[ i ];\n                element.appendChild(symbol);\n\n                const detail = document.createElement('div');\n                detail.className = 'detail';\n                detail.innerHTML = `${ table[ i+1 ]} <br/> ${ table[ i+2 ]}`;\n                element.appendChild(detail);\n\n                const card = new CSS3DObject( element );\n                card.position.x = Math.random() * width - (width/2);\n                card.position.y = Math.random() * 1000 - 600 ;\n                card.position.z = Math.random() * 1000 - 800;\n\n                scene.add(card);\n                objects.push( card );\n\n                //TABLE\n\n                const object = new THREE.Object3D();\n                object.position.x = table[i + 3] * 140 - (width/3); \n                object.position.y = -table[i + 4] * 180 + (height/1.5); \n                object.position.z = 0;\n\n                targets.table.push(object);\n            } \n\n    \n            \n            \n\n    //SPHERE\n            function sphere(){\n                const vector = new THREE.Vector3();\n\n                for (let i =0; i< objects.length; ++i){\n                    let phi = Math.acos(-1 + ( 2 * i )/ objects.length);\n                    let theta = Math.sqrt( objects.length * Math.PI ) * phi;\n                    \n                    var object = new THREE.Object3D();\n\n                    object.position.x = 800 * Math.cos( theta ) * Math.sin( phi );\n                    object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); \n                    object.position.z = 800 * Math.cos( phi );\n\n                    //rotation object\n\n                    vector.copy( object.position ).multiplyScalar(2);\n                    object.lookAt( vector );\n                    targets.sphere.push( object );\n                }\n            }\n            sphere()\n    // HELIX\n            function helix(){\n                const vector = new THREE.Vector3();\n\n                for(let i=0; i<objects.length; ++i){\n\n                    let phi = i * 0.739 + Math.PI;\n                    const object = new THREE.Object3D();\n                    object.position.x = 800  * Math.sin( phi );\n                    object.position.y = -( i * 8 ) + 50;\n                    object.position.z = 800  * Math.cos( phi + Math.PI );\n            \n                    object.scale.set( 1.1, 1.1, 1.1 );\n            \n                    vector.x = object.position.x * 2;\n                    vector.y = object.position.y;\n                    vector.z = object.position.z * 2;\n            \n                    object.lookAt( vector );\n                    targets.helix.push( object );\n\n                }\n            }\n            \n            helix()\n    //GRID \n            \n                for (let i =0 ; i<objects.length; i++ ) {\n    \n                    const object = new THREE.Object3D();\n            \n                    object.position.x =  360  * ( i   % 3) - 350;\n\t                object.position.y = -360  * ( ( i /  3 >> 0 ) % 3 ) + 350;\n\t                object.position.z = -700  * ( i / 9 >> 0 );\n\n            \n                    targets.grid.push( object );\n                    \n                }\n\n\n                //RENDERER\n                renderer = new CSS3DRenderer();\n                renderer.setSize( width, height);\n                renderer.domElement.style.position = 'absolute';\n                WebGloutput.appendChild( renderer.domElement);\n            \n                //CAMERA CONTROLE\n                controls = new TrackballControls( camera, renderer.domElement );\n\t\t\t\tcontrols.rotateSpeed = 2;\n\t\t\t\tcontrols.minDistance = 1000;\n\t\t\t\tcontrols.maxDistance = 4000;\n\t\t\t\tcontrols.addEventListener( 'change', render );\n\n            const gridBtn = document.getElementById('grid');\n            const tableBtn = document.getElementById('table');\n            const helixBtn = document.getElementById('helix');\n            const sphereBtn = document.getElementById('sphere');\n\n            \n            gridBtn.addEventListener('click', function() { transform( targets.grid, 2000 )}, false );\n            tableBtn.addEventListener('click', function() { transform( targets.table, 2000 ) }, false );\n            helixBtn.addEventListener('click', function() { transform( targets.helix, 2000 ) }, false );\n            sphereBtn.addEventListener('click', function() { transform( targets.sphere, 2000 ) }, false );\n\n            transform( targets.table, 2000 );\n        };\n        \n        function transform( targets, duration){\n            TWEEN.removeAll();\n\n            for(let i = 0; i< objects.length; ++i){\n                let object = objects[i];\n                let target = targets[i];\n\n                new TWEEN.Tween(object.position)\n                    .to({ x: target.position.x, y: target.position.y, z: target.position.z}, Math.random() * duration + duration)\n                    .easing( TWEEN.Easing.Exponential.InOut )\n                    .start();\n\n                new TWEEN.Tween( object.rotation )\n\t                .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z },Math.random() * duration + duration )\n\t                .easing( TWEEN.Easing.Exponential.InOut )\n\t                .start();\n\n            }\n\n        \n            new TWEEN.Tween({})\n                .to({}, duration * 2)\n                .onUpdate( render )\n                .start();\n        }\n\n        function render() {\n\n            renderer.render( scene, camera );\n\n        }\n\n        function onWindowResize(){\n            camera.aspect = width / height;\n            camera.updateProjectionMatrix();\n\n            renderer.setSize( width, height);\n            render();\n        }\n        \n\n        function animation(){\n            requestAnimationFrame( animation );\n            TWEEN.update();\n            controls.update();\n            \n        }\n\n    \n    }*/\n    \n\n    render () {\n        \n        return (\n            <>\n                <div id=\"periodic-container\" >\n    \t     \n                </div>\n                <ul id=\"menu\" >\n                    <li id=\"table\" className=\"hover\"><DestrucBtn word={\"TABLE\"}/></li>\n                    <li id=\"sphere\"><DestrucBtn word={\"SPHERE\"}/></li>\n                    <li id=\"helix\"><DestrucBtn word={\"HELIX\"}/></li>\n                    <li id=\"grid\"><DestrucBtn word={\"GRID\"}/></li>\n                </ul>\n        </>\n        )\n    }\n}\n\nexport default PeriodicSkills;"]},"metadata":{},"sourceType":"module"}