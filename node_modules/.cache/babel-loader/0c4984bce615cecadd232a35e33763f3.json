{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/Git Pro/Portfolio/src/components/Mouse.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\n\nconst Mouse = () => {\n  _s();\n\n  useEffect(() => {\n    const cursor = document.querySelector('.cursor');\n    const mouseTxt = cursor.querySelector('.cursorText');\n    /*const handleHover = (link) =>{\n        \n        switch (true) {\n            case link.classList.contains('hovTxt'): \n                cursor.classList.add('hoveredText');                   \n                break;\n            case link.classList.contains('tips'):\n                cursor.classList.add('tipsCursor');   \n                mouseTxt.textContent = link.dataset.txt;\n                break;\n            default:\n                cursor.classList.add('hovered');   \n                break;\n        }\n        \n    }\n    const handleLeave = () =>{\n        if(cursor.classList.contains('hovered'))cursor.classList.remove('hovered');\n        if(cursor.classList.contains('hoveredText'))cursor.classList.remove('hoveredText');\n        if(cursor.classList.contains('tipsCursor'))cursor.classList.remove('tipsCursor');\n        mouseTxt.textContent = '';\n    }\n    */\n    //position\n    // set the starting position of the cursor outside of the screen\n\n    let clientX = -100;\n    let clientY = -100;\n\n    const initCursor = () => {\n      // add listener to track the current mouse position\n      document.addEventListener(\"mousemove\", e => {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }); // transform the cursor to the current mouse position\n      // use requestAnimationFrame() for smooth performance\n\n      const render = () => {\n        cursor.style.transform = `translate(${clientX}px, ${clientY}px)`;\n        requestAnimationFrame(render);\n      };\n\n      requestAnimationFrame(render);\n    };\n\n    initCursor();\n    /*\n            document.addEventListener('mousemove', e => {\n                cursor.style.left = `${e.clientX}px`;\n                cursor.style.top = `${e.clientY}px`;\n            })\n           \n               /*\n            document.querySelectorAll('.hover').forEach(link =>{\n                \n                link.addEventListener('mouseover', ()=>{\n                    if(link.classList.contains('active') || link.classList.contains('nav-active') || link.classList.contains('lang-active'))return;\n                    handleHover(link);\n                } );\n                link.addEventListener('mouseleave', handleLeave);       \n            })*/\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cursor\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cursorText \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Mouse, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Mouse;\nexport default Mouse;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mouse\");","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/Git Pro/Portfolio/src/components/Mouse.js"],"names":["React","useEffect","Mouse","cursor","document","querySelector","mouseTxt","clientX","clientY","initCursor","addEventListener","e","render","style","transform","requestAnimationFrame"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAGhBD,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAf;AACA,UAAMC,QAAQ,GAAGH,MAAM,CAACE,aAAP,CAAqB,aAArB,CAAjB;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEQ;AAEA;;AACA,QAAIE,OAAO,GAAG,CAAC,GAAf;AACA,QAAIC,OAAO,GAAG,CAAC,GAAf;;AAGA,UAAMC,UAAU,GAAG,MAAM;AACzB;AACAL,MAAAA,QAAQ,CAACM,gBAAT,CAA0B,WAA1B,EAAuCC,CAAC,IAAI;AACxCJ,QAAAA,OAAO,GAAGI,CAAC,CAACJ,OAAZ;AACAC,QAAAA,OAAO,GAAGG,CAAC,CAACH,OAAZ;AACH,OAHD,EAFyB,CAOzB;AACA;;AACA,YAAMI,MAAM,GAAG,MAAM;AACjBT,QAAAA,MAAM,CAACU,KAAP,CAAaC,SAAb,GAA0B,aAAYP,OAAQ,OAAMC,OAAQ,KAA5D;AAEAO,QAAAA,qBAAqB,CAACH,MAAD,CAArB;AACH,OAJD;;AAKAG,MAAAA,qBAAqB,CAACH,MAAD,CAArB;AACC,KAfD;;AAiBAH,IAAAA,UAAU;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEK,GAvEQ,CAAT;AAyEA,sBAEI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CAtFD;;GAAMP,K;;KAAAA,K;AAwFN,eAAeA,KAAf","sourcesContent":["import React, {useEffect} from 'react'\n\nconst Mouse = () => {\n\n\n    useEffect(() => {\n        \n        const cursor = document.querySelector('.cursor');\n        const mouseTxt = cursor.querySelector('.cursorText');\n        \n        /*const handleHover = (link) =>{\n            \n            switch (true) {\n                case link.classList.contains('hovTxt'): \n                    cursor.classList.add('hoveredText');                   \n                    break;\n                case link.classList.contains('tips'):\n                    cursor.classList.add('tipsCursor');   \n                    mouseTxt.textContent = link.dataset.txt;\n                    break;\n                default:\n                    cursor.classList.add('hovered');   \n                    break;\n            }\n            \n        }\n        const handleLeave = () =>{\n            if(cursor.classList.contains('hovered'))cursor.classList.remove('hovered');\n            if(cursor.classList.contains('hoveredText'))cursor.classList.remove('hoveredText');\n            if(cursor.classList.contains('tipsCursor'))cursor.classList.remove('tipsCursor');\n            mouseTxt.textContent = '';\n        }\n        */\n       \n        //position\n\n        // set the starting position of the cursor outside of the screen\n        let clientX = -100;\n        let clientY = -100;\n        \n\n        const initCursor = () => {\n        // add listener to track the current mouse position\n        document.addEventListener(\"mousemove\", e => {\n            clientX = e.clientX;\n            clientY = e.clientY;\n        });\n        \n        // transform the cursor to the current mouse position\n        // use requestAnimationFrame() for smooth performance\n        const render = () => {\n            cursor.style.transform = `translate(${clientX}px, ${clientY}px)`;\n            \n            requestAnimationFrame(render);\n        };\n        requestAnimationFrame(render);\n        };\n\n        initCursor();\n\n/*\n        document.addEventListener('mousemove', e => {\n            cursor.style.left = `${e.clientX}px`;\n            cursor.style.top = `${e.clientY}px`;\n        })\n       \n           /*\n        document.querySelectorAll('.hover').forEach(link =>{\n            \n            link.addEventListener('mouseover', ()=>{\n                if(link.classList.contains('active') || link.classList.contains('nav-active') || link.classList.contains('lang-active'))return;\n                handleHover(link);\n            } );\n            link.addEventListener('mouseleave', handleLeave);       \n        })*/\n\n    })\n    \n    return (\n        \n        <div className=\"cursor\" >\n            <div className=\"cursorText \">\n\n            </div>\n        </div>\n      \n        \n    );\n}\n\nexport default Mouse;"]},"metadata":{},"sourceType":"module"}