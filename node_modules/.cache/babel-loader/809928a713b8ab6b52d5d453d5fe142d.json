{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/ThreeSkills.js\";\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nclass ThreeSkills extends Component {\n  componentDidMount() {\n    const OrbitControls = require('three-orbit-controls')(THREE);\n\n    const {\n      width,\n      height\n    } = this.props;\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    let renderer = new THREE.WebGLRenderer({\n      alpha: true\n    });\n    renderer.setSize(width, height);\n    this.mount.appendChild(renderer.domElement);\n    let geometry = new THREE.BoxGeometry(2, 2, 2);\n    let material = new THREE.MeshBasicMaterial({\n      color: 0x66fad3,\n      wireframe: true\n    });\n    let cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    let animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => this.mount = ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default ThreeSkills;","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/ThreeSkills.js"],"names":["React","Component","THREE","ThreeSkills","componentDidMount","OrbitControls","require","width","height","props","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","alpha","setSize","mount","appendChild","domElement","geometry","BoxGeometry","material","MeshBasicMaterial","color","wireframe","cube","Mesh","add","position","z","controls","animate","requestAnimationFrame","rotation","x","y","render","ref"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAIA,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAClCG,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCJ,KAAhC,CAAtB;;AACA,UAAM;AAACK,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,KAAKC,KAA7B;AACA,QAAIC,KAAK,GAAG,IAAIR,KAAK,CAACS,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIV,KAAK,CAACW,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAIf,KAAK,CAACgB,aAAV,CAA0B;AAAEC,MAAAA,KAAK,EAAC;AAAR,KAA1B,CAAf;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAkBb,KAAlB,EAAyBC,MAAzB;AAEA,SAAKa,KAAL,CAAWC,WAAX,CAAwBL,QAAQ,CAACM,UAAjC;AACA,QAAIC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE,QAAT;AAAmBC,MAAAA,SAAS,EAAE;AAA9B,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI5B,KAAK,CAAC6B,IAAV,CAAgBP,QAAhB,EAA0BE,QAA1B,CAAX;AACAhB,IAAAA,KAAK,CAACsB,GAAN,CAAWF,IAAX;AACAlB,IAAAA,MAAM,CAACqB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;AACA,UAAMC,QAAQ,GAAG,IAAI9B,aAAJ,CAAkB,KAAKO,MAAvB,EAA+B,KAAKK,QAAL,CAAcM,UAA7C,CAAjB;;AACA,QAAIa,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAN,MAAAA,IAAI,CAACQ,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAT,MAAAA,IAAI,CAACQ,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAvB,MAAAA,QAAQ,CAACwB,MAAT,CAAiB/B,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAMAwB,IAAAA,OAAO;AACR;;AACDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,GAAG,EAAEC,GAAG,IAAK,KAAKrB,KAAL,GAAaqB;AAA/B;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AA5BiC;;AA+BpC,eAAevC,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\n\n\nclass ThreeSkills extends Component {\n  componentDidMount() {\n    const OrbitControls = require('three-orbit-controls')(THREE);\n    const {width, height} = this.props;\n    let scene = new THREE.Scene();\n    let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    let renderer = new THREE.WebGLRenderer(( { alpha:true}));\n    renderer.setSize( width, height );\n    \n    this.mount.appendChild( renderer.domElement );\n    let geometry = new THREE.BoxGeometry( 2, 2, 2 );\n    let material = new THREE.MeshBasicMaterial( { color: 0x66fad3, wireframe: true } );\n    let cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    camera.position.z = 5;\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n    let animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\n\nexport default ThreeSkills;\n"]},"metadata":{},"sourceType":"module"}