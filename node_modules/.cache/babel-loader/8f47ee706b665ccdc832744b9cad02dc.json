{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/TryThree.js\";\nimport { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport * as THREE from \"three\";\nimport { ObjectLoader } from 'three';\nimport { CSS3DObject, CSS3DRenderer } from 'three-css3drenderer';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { table } from \"../data/skillsThree\";\n\nclass TryThree extends Component {\n  componentDidMount() {\n    // THREE PARAMETRES\n    let scene, camera, renderer, controls;\n    const objects = [];\n    const targets = {\n      grid: [],\n      helix: [],\n      table: [],\n      sphere: []\n    };\n\n    function init() {\n      const felidView = 40;\n      const width = window.innerWidth / 2;\n      const height = window.innerHeight / 2;\n      const aspect = width / height;\n      const nearPlane = 0.1;\n      const farPlane = 1000;\n      const WebGloutput = document.getElementById('container');\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(felidView, aspect, nearPlane, farPlane);\n      camera.position.z = 300;\n      renderer = new CSS3DRenderer();\n      renderer.setSize(width, height);\n      renderer.domElement.style.position = 'absolute';\n      WebGloutput.appendChild(renderer.domElement); //ELEMENTS\n\n      for (let i = 0; i < table.length; i += 5) {\n        const element = document.createElement('div');\n        element.className = 'element';\n        element.style.backgroundColor = `rgba( 0, 127, 127, ${Math.random() * 0.5 + 0.25})`;\n        const number = document.createElement('div');\n        number.className = 'number';\n        number.textContent = i / 5 + 1;\n        element.appendChild(number);\n        const symbol = document.createElement('div');\n        symbol.className = 'symbol';\n        symbol.textContent = table[i];\n        element.appendChild(symbol);\n        const detail = document.createElement('div');\n        detail.className = 'detail';\n        detail.innerHTML = `${table[i + 1]} <br/> ${table[i + 2]}}`;\n        element.appendChild(detail);\n        const object = new CSS3DObject(element);\n        object.position.x = Math.random() * 400 - 200;\n        object.position.y = Math.random() * 400 - 200;\n        object.position.z = Math.random() * 400 - 200;\n        scene.add(object);\n        objects.push(object);\n      } //TABLE\n\n\n      function createTableVertices() {\n        for (let i = 0; i < table.length; i += 5) {\n          const object = new THREE.Object3D();\n          object.position.x = table[i + 3] * 140 - width; //1260\n\n          object.position.y = -table[i + 4] * 180 + height; //1000\n\n          object.position.z = 0;\n          targets.table.push(object);\n        }\n      } //SPHERE\n\n\n      function createSphereVertices() {\n        const vector = new THREE.Vector3();\n\n        for (let i = 0; i < objects.length; i++) {\n          let phi = Math.acos(-1 + 2 * i / objects.length);\n          let theta = Math.sqrt(objects.length * Math.PI) * phi;\n          const object = new THREE.Object3D();\n          object.position.x = 800 * Math.cos(theta) * Math.sin(phi);\n          object.position.y = 800 * Math.sin(theta) * Math.sin(phi);\n          object.position.z = 800 * Math.cos(phi); //rotation object\n\n          vector.copy(object.position).multiplyScalar(2);\n          object.lookAt(vector);\n          targets.sphere.push(object);\n        }\n      }\n    }\n\n    ;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"menu\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"table\",\n          children: \"TABLE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"sphere\",\n          children: \"SPHERE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"helix\",\n          children: \"HELIX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"grid\",\n          children: \"GRID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TryThree;","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/TryThree.js"],"names":["render","React","Component","THREE","ObjectLoader","CSS3DObject","CSS3DRenderer","OrbitControls","table","TryThree","componentDidMount","scene","camera","renderer","controls","objects","targets","grid","helix","sphere","init","felidView","width","window","innerWidth","height","innerHeight","aspect","nearPlane","farPlane","WebGloutput","document","getElementById","Scene","PerspectiveCamera","position","z","setSize","domElement","style","appendChild","i","length","element","createElement","className","backgroundColor","Math","random","number","textContent","symbol","detail","innerHTML","object","x","y","add","push","createTableVertices","Object3D","createSphereVertices","vector","Vector3","phi","acos","theta","sqrt","PI","cos","sin","copy","multiplyScalar","lookAt"],"mappings":"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","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react'\nimport * as THREE from \"three\";\nimport { ObjectLoader } from 'three';\nimport { CSS3DObject, CSS3DRenderer } from 'three-css3drenderer';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport { table } from \"../data/skillsThree\";\n\n\nclass TryThree extends Component {\n\n\n    componentDidMount(){\n        \n        // THREE PARAMETRES\n        let scene, camera, renderer, controls;\n        const objects = [];\n        const targets = {\n            grid: [],\n            helix: [],\n            table:[],\n            sphere:[]\n        };\n\n        function init(){\n            const felidView = 40;\n            const width = window.innerWidth/2;\n            const height = window.innerHeight/2;\n            const aspect = width / height;\n            const nearPlane = 0.1;\n            const farPlane = 1000;\n            const WebGloutput = document.getElementById('container');\n\n            scene = new THREE.Scene();\n            \n            camera = new THREE.PerspectiveCamera( felidView, aspect, nearPlane, farPlane);\n            camera.position.z = 300;\n\n            renderer = new CSS3DRenderer();\n            renderer.setSize( width, height);\n            renderer.domElement.style.position = 'absolute';\n            WebGloutput.appendChild( renderer.domElement);\n       \n        //ELEMENTS\n        \n        \n        for( let i=0; i < table.length; i +=5 ) {\n            const element = document.createElement('div');\n            element.className = 'element';\n            element.style.backgroundColor = `rgba( 0, 127, 127, ${ Math.random() * 0.5 + 0.25})`;\n\n            const number = document.createElement('div');\n            number.className = 'number';\n            number.textContent = i / 5 + 1;\n            element.appendChild(number);\n\n            const symbol = document.createElement('div');\n            symbol.className = 'symbol';\n            symbol.textContent = table[ i ];\n            element.appendChild(symbol);\n\n            const detail = document.createElement('div');\n            detail.className = 'detail';\n            detail.innerHTML = `${ table[ i+1 ]} <br/> ${ table[ i+2 ]}}`;\n            element.appendChild(detail);\n\n            const object = new CSS3DObject( element );\n            object.position.x = Math.random() * 400 - 200 ;\n            object.position.y = Math.random() * 400 - 200 ;\n            object.position.z = Math.random() * 400 - 200 ;\n\n            \n            scene.add(object);\n            objects.push( object );\n        } \n\n//TABLE\n        function createTableVertices(){\n            for (let i = 0; i<table.length; i +=5){\n                const object = new THREE.Object3D();\n\n                object.position.x = table[i + 3] * 140 - width; //1260\n                object.position.y = -table[i + 4] * 180 + height; //1000\n                object.position.z = 0;\n\n                targets.table.push(object);\n            }\n        }\n\n//SPHERE\n        function createSphereVertices(){\n\n            \n            const vector = new THREE.Vector3();\n\n            for (let i =0; i< objects.length; i++){\n                let phi = Math.acos(-1 + ( 2 * i )/ objects.length);\n                let theta = Math.sqrt( objects.length * Math.PI ) * phi;\n                const object = new THREE.Object3D();\n\n                object.position.x = 800 * Math.cos( theta ) * Math.sin( phi );\n                object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); \n                object.position.z = 800 * Math.cos( phi );\n\n                //rotation object\n\n                vector.copy( object.position ).multiplyScalar(2);\n                object.lookAt( vector );\n                targets.sphere.push( object );\n            }\n        }\n    };\n        \n    }\n    \n\n    render () {\n        \n        return (\n            <div id=\"container\">\n    \t     \n                <div id=\"menu\">\n                    <button id=\"table\">TABLE</button>\n                    <button id=\"sphere\">SPHERE</button>\n                    <button id=\"helix\">HELIX</button>\n                    <button id=\"grid\">GRID</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TryThree;"]},"metadata":{},"sourceType":"module"}