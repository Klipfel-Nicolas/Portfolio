{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/projects/Projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { projects } from \"../../data/projects-data\";\nimport Project from \"./Project\";\n\nconst Projects = () => {\n  _s();\n\n  const {\n    project1,\n    project2,\n    project3\n  } = projects;\n  useEffect(() => {\n    let sliderCanvas = document.querySelector('.pieces-slider__canvas');\n    let imagesEl = [].slice.call(document.querySelectorAll('.pieces-slider__image'));\n    let textEl = [].slice.call(document.querySelectorAll('.pieces-slider__text'));\n    let slidesLength = imagesEl.length; // Define indexes related variables, as we will use indexes to reference items\n\n    let currentIndex = 0,\n        currentImageIndex,\n        currentTextIndex,\n        currentNumberIndex;\n    let textIndexes = [];\n    let numberIndexes = []; // Update current indexes for image, text and number\n\n    function updateIndexes() {\n      currentImageIndex = currentIndex * 3;\n      currentTextIndex = currentImageIndex + 1;\n      currentNumberIndex = currentImageIndex + 2;\n    }\n\n    updateIndexes(); // Options for images\n\n    let imageOption = {\n      angle: 45,\n      // rotate item pieces 45deg\n      exraSpacing: {\n        extraX: 100,\n        extraY: 200\n      },\n      // this extra spacing is needed to cover all the item, because angle != 0\n      pieceWidth: function () {\n        return Pieces.random(50, 200);\n      },\n      // every piece will have a random width between 50px and 200px\n      ty: function () {\n        return Pieces.random(-400, 400);\n      } // every piece will be translated in the Y axis a random distance between -400px and 400px\n\n    }; // Options for texts\n\n    let textOptions = {\n      color: 'white',\n      backgroundColor: '#0066CC',\n      fontSize: function () {\n        return windowWidth > 720 ? 50 : 30;\n      },\n      padding: '15 20 10 20',\n      angle: -45,\n      extraSpacing: {\n        extraX: 0,\n        extraY: 300\n      },\n      piecesWidth: function () {\n        return Pieces.random(50, 200);\n      },\n      ty: function () {\n        return Pieces.random(-200, 200);\n      },\n      translate: function () {\n        if (windowWidth > 1120) return {\n          translateX: 200,\n          translateY: 200\n        };\n        if (windowWidth > 720) return {\n          translateX: 0,\n          translateY: 200\n        };\n        return {\n          translateX: 0,\n          translateY: 100\n        };\n      }\n    };\n    let numberOptions = {\n      color: 'white',\n      backgroundColor: '#0066CC',\n      backgroundRadius: 300,\n      fontSize: function () {\n        return windowWidth > 720 ? 100 : 50;\n      },\n      padding: function () {\n        return windowWidth > 720 ? '18 35 10 38' : '18 25 10 28';\n      },\n      angle: 0,\n      piecesSpacing: 2,\n      extraSpacing: {\n        extraX: 10,\n        extraY: 10\n      },\n      piecesWidth: 35,\n      ty: function () {\n        return Pieces.random(-200, 200);\n      },\n      translate: function () {\n        if (windowWidth > 1120) return {\n          translateX: -340,\n          translateY: -180\n        };\n        if (windowWidth > 720) return {\n          translateX: -240,\n          translateY: -180\n        };\n        return {\n          translateX: -140,\n          translateY: -100\n        };\n      }\n    };\n    let items = [];\n    let imagesReady = 0;\n\n    for (let i = 0; i < slidesLength; i++) {\n      // Wait for all images to load before initializing the slider and event listeners\n      let slideImage = new Image();\n\n      slideImage.onload = function () {\n        if (++imagesReady == slidesLength) {\n          initSlider();\n          initEvents();\n        }\n      }; // Push all elements for each slide with the corresponding options\n\n\n      items.push({\n        type: 'image',\n        value: imagesEl[i],\n        options: imageOptions\n      });\n      items.push({\n        type: 'text',\n        value: textEl[i].innerText,\n        options: textOptions\n      });\n      items.push({\n        type: 'text',\n        value: i + 1,\n        options: numberOptions\n      }); // Save indexes\n\n      textIndexes.push(i * 3 + 1);\n      numberIndexes.push(i * 3 + 2); // Set image src\n\n      slideImage.src = imagesEl[i].src;\n    }\n\n    ;\n    console.log(sliderCanvas); // Save the new Pieces instance\n\n    piecesSlider = new Pieces({\n      canvas: sliderCanvas,\n      // CSS selector to get the canvas\n      items: items,\n      // the Array of items we've built before\n      x: 'centerAll',\n      // center all items in the X axis\n      y: 'centerAll',\n      // center all items in the Y axis\n      piecesSpacing: 1,\n      // default spacing between pieces\n      fontFamily: [\"'Helvetica Neue', sans-serif\"],\n      animation: {\n        // animation options to use in any operation\n        duration: function () {\n          return Pieces.random(1000, 2000);\n        },\n        easing: 'easeOutQuint'\n      },\n      debug: false // set `debug: true` to enable debug mode\n\n    }); // Animate all numbers to rotate clockwise indefinitely\n\n    piecesSlider.animateItems({\n      items: numberIndexes,\n      duration: 20000,\n      angle: 360,\n      loop: true\n    }); // Show current items: image, text and number\n\n    showItems(); // Show current items: image, text and number\n\n    function showItems() {\n      // Show image pieces\n      piecesSlider.showPieces({\n        items: currentImageIndex,\n        ignore: ['tx'],\n        singly: true,\n        update: anim => {\n          // Stop the pieces animation at 60%, and run a new indefinitely animation of `ty` for each piece\n          if (anim.progress > 60) {\n            let piece = anim.animatables[0].target;\n            let ty = piece.ty;\n            anime.remove(piece);\n            anime({\n              targets: piece,\n              ty: piece.h_ty < 300 ? [{\n                value: ty + 10,\n                duration: 1000\n              }, {\n                value: ty - 10,\n                duration: 2000\n              }, {\n                value: ty,\n                duration: 1000\n              }] : [{\n                value: ty - 10,\n                duration: 1000\n              }, {\n                value: ty + 10,\n                duration: 2000\n              }, {\n                value: ty,\n                duration: 1000\n              }],\n              duration: 2000,\n              easing: 'linear',\n              loop: true\n            });\n          }\n        }\n      }); // Show pieces for text and number, using alternate `ty` values\n\n      piecesSlider.showPieces({\n        items: currentTextIndex\n      });\n      piecesSlider.showPieces({\n        items: currentNumberIndex,\n        ty: function (p, i) {\n          return p.s_ty - [-3, 3][i % 2];\n        }\n      });\n    } // Hide current items: image, text and number\n\n\n    function hideItems() {\n      piecesSlider.hidePieces({\n        items: [currentImageIndex, currentTextIndex, currentNumberIndex]\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"projects-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pieces-slider\",\n      children: [/*#__PURE__*/_jsxDEV(Project, {\n        project: project1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Project, {\n        project: project2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Project, {\n        project: project3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"pieces-slider__canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pieces-slider__button pieces-slider__button--prev\",\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pieces-slider__button pieces-slider__button--next\",\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Projects, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/klipfelnicolas/Desktop/dossier web/ProjetGit/Portfolio/client/src/components/projects/Projects.js"],"names":["React","useEffect","projects","Project","Projects","project1","project2","project3","sliderCanvas","document","querySelector","imagesEl","slice","call","querySelectorAll","textEl","slidesLength","length","currentIndex","currentImageIndex","currentTextIndex","currentNumberIndex","textIndexes","numberIndexes","updateIndexes","imageOption","angle","exraSpacing","extraX","extraY","pieceWidth","Pieces","random","ty","textOptions","color","backgroundColor","fontSize","windowWidth","padding","extraSpacing","piecesWidth","translate","translateX","translateY","numberOptions","backgroundRadius","piecesSpacing","items","imagesReady","i","slideImage","Image","onload","initSlider","initEvents","push","type","value","options","imageOptions","innerText","src","console","log","piecesSlider","canvas","x","y","fontFamily","animation","duration","easing","debug","animateItems","loop","showItems","showPieces","ignore","singly","update","anim","progress","piece","animatables","target","anime","remove","targets","h_ty","p","s_ty","hideItems","hidePieces"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\n\nimport { projects } from \"../../data/projects-data\";\nimport Project from \"./Project\";\n\nconst Projects = () => {\n    \n    const { project1, project2, project3} = projects;\n\n    useEffect(() => {\n       \n        let sliderCanvas = document.querySelector('.pieces-slider__canvas');\n        let imagesEl = [].slice.call(document.querySelectorAll('.pieces-slider__image'));\n        let textEl = [].slice.call(document.querySelectorAll('.pieces-slider__text'));\n        let slidesLength = imagesEl.length;\n\n        // Define indexes related variables, as we will use indexes to reference items\n        let currentIndex = 0,\n            currentImageIndex, currentTextIndex, currentNumberIndex;\n        let textIndexes = [];\n        let numberIndexes = [];\n\n        // Update current indexes for image, text and number\n        function updateIndexes() {\n            currentImageIndex = currentIndex * 3;\n            currentTextIndex = currentImageIndex + 1;\n            currentNumberIndex = currentImageIndex + 2;\n        }\n        updateIndexes();\n\n        // Options for images\n        let imageOption = {\n            angle: 45, // rotate item pieces 45deg\n            exraSpacing: {\n                extraX: 100,\n                extraY: 200\n            }, // this extra spacing is needed to cover all the item, because angle != 0\n            pieceWidth: function() {\n                return Pieces.random(50, 200);\n            }, // every piece will have a random width between 50px and 200px\n            ty: function() {\n                    return Pieces.random(-400, 400);\n                } // every piece will be translated in the Y axis a random distance between -400px and 400px\n        }\n\n        // Options for texts\n        let textOptions = {\n            color: 'white',\n            backgroundColor: '#0066CC',\n            fontSize: function() {\n                return windowWidth > 720 ? 50 : 30;\n            },\n            padding: '15 20 10 20',\n            angle: -45,\n            extraSpacing: {\n                extraX: 0,\n                extraY: 300\n            },\n            piecesWidth: function() {\n                return Pieces.random(50, 200);\n            },\n            ty: function() {\n                return Pieces.random(-200, 200);\n            },\n            translate: function() {\n                if (windowWidth > 1120) return {\n                    translateX: 200,\n                    translateY: 200\n                };\n                if (windowWidth > 720) return {\n                    translateX: 0,\n                    translateY: 200\n                };\n                return {\n                    translateX: 0,\n                    translateY: 100\n                };\n            }\n        };\n\n        let numberOptions = {\n            color: 'white',\n            backgroundColor: '#0066CC',\n            backgroundRadius: 300,\n            fontSize: function() {\n                return windowWidth > 720 ? 100 : 50;\n            },\n            padding: function() {\n                return windowWidth > 720 ? '18 35 10 38' : '18 25 10 28';\n            },\n            angle: 0,\n            piecesSpacing: 2,\n            extraSpacing: {\n                extraX: 10,\n                extraY: 10\n            },\n            piecesWidth: 35,\n            ty: function() {\n                return Pieces.random(-200, 200);\n            },\n            translate: function() {\n                if (windowWidth > 1120) return {\n                    translateX: -340,\n                    translateY: -180\n                };\n                if (windowWidth > 720) return {\n                    translateX: -240,\n                    translateY: -180\n                };\n                return {\n                    translateX: -140,\n                    translateY: -100\n                };\n            }\n        };\n\n        let items = [];\n        let imagesReady = 0;\n        for (let i = 0; i < slidesLength; i++) {\n            // Wait for all images to load before initializing the slider and event listeners\n            let slideImage = new Image();\n            slideImage.onload = function() {\n                if (++imagesReady == slidesLength) {\n                    initSlider();\n                    initEvents();\n                }\n            }\n\n\n            // Push all elements for each slide with the corresponding options\n            items.push({\n                type: 'image',\n                value: imagesEl[i],\n                options: imageOptions\n            });\n            items.push({\n                type: 'text',\n                value: textEl[i].innerText,\n                options: textOptions\n            });\n            items.push({\n                type: 'text',\n                value: i + 1,\n                options: numberOptions\n            });\n            // Save indexes\n            textIndexes.push(i * 3 + 1);\n            numberIndexes.push(i * 3 + 2);\n            // Set image src\n            slideImage.src = imagesEl[i].src;\n\n        };\n        console.log(sliderCanvas);\n        // Save the new Pieces instance\n        piecesSlider = new Pieces({\n            canvas: sliderCanvas, // CSS selector to get the canvas\n            items: items, // the Array of items we've built before\n            x: 'centerAll', // center all items in the X axis\n            y: 'centerAll', // center all items in the Y axis\n            piecesSpacing: 1, // default spacing between pieces\n            fontFamily: [\"'Helvetica Neue', sans-serif\"],\n            animation: { // animation options to use in any operation\n                duration: function() {\n                    return Pieces.random(1000, 2000);\n                },\n                easing: 'easeOutQuint'\n            },\n            debug: false // set `debug: true` to enable debug mode\n        });\n\n        // Animate all numbers to rotate clockwise indefinitely\n        piecesSlider.animateItems({\n            items: numberIndexes,\n            duration: 20000,\n            angle: 360,\n            loop: true\n        });\n\n        // Show current items: image, text and number\n        showItems();\n\n        // Show current items: image, text and number\n        function showItems() {\n            // Show image pieces\n\n            piecesSlider.showPieces({\n                items: currentImageIndex,\n                ignore: ['tx'],\n                singly: true,\n                update: (anim) => {\n                    // Stop the pieces animation at 60%, and run a new indefinitely animation of `ty` for each piece\n                    if (anim.progress > 60) {\n                        let piece = anim.animatables[0].target;\n                        let ty = piece.ty;\n                        anime.remove(piece);\n                        anime({\n                            targets: piece,\n                            ty: piece.h_ty < 300 ? [{\n                                value: ty + 10,\n                                duration: 1000\n                            }, {\n                                value: ty - 10,\n                                duration: 2000\n                            }, {\n                                value: ty,\n                                duration: 1000\n                            }] : [{\n                                value: ty - 10,\n                                duration: 1000\n                            }, {\n                                value: ty + 10,\n                                duration: 2000\n                            }, {\n                                value: ty,\n                                duration: 1000\n                            }],\n                            duration: 2000,\n                            easing: 'linear',\n                            loop: true\n                        });\n                    }\n                }\n            });\n            // Show pieces for text and number, using alternate `ty` values\n            piecesSlider.showPieces({\n                items: currentTextIndex\n            });\n            piecesSlider.showPieces({\n                items: currentNumberIndex,\n                ty: function(p, i) {\n                    return p.s_ty - [-3, 3][i % 2];\n                }\n            });\n        }\n\n        // Hide current items: image, text and number\n        function hideItems() {\n            piecesSlider.hidePieces({\n                items: [currentImageIndex, currentTextIndex, currentNumberIndex]\n            });\n        }\n\n    }, []);\n   \n    \n    return (\n        <main className=\"projects-container\">\n            <div className=\"pieces-slider\">\n                <Project project={project1}/> \n                <Project project={project2}/> \n                <Project project={project3}/>\n            \n                <canvas className=\"pieces-slider__canvas\"></canvas>\n                \n                <button className=\"pieces-slider__button pieces-slider__button--prev\">prev</button>\n                <button className=\"pieces-slider__button pieces-slider__button--next\">next</button>\n            </div>          \n        </main>\n    )\n}\n\nexport default Projects;"]},"metadata":{},"sourceType":"module"}